// Code generated by Kubeform. DO NOT EDIT.

package main

import (
	"flag"
	"os"

	"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
	kscheme "k8s.io/client-go/kubernetes/scheme"
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
	"k8s.io/klog/v2/klogr"
	ctrl "sigs.k8s.io/controller-runtime"

	admissionregistrationv1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"
	linodescheme "kubeform.dev/provider-linode-api/client/clientset/versioned/scheme"
	// +kubebuilder:scaffold:imports
)

var (
	scheme   = kscheme.Scheme
	setupLog = ctrl.Log.WithName("setup")
)

var enableValidatingWebhook bool
var webhookName string
var webhookNamespace string
var enableAnalytics bool

func init() {
	_ = clientgoscheme.AddToScheme(scheme)
	_ = linodescheme.AddToScheme(scheme)
	//_ = linodescheme.AddToScheme(kscheme.Scheme)
	// +kubebuilder:scaffold:scheme
}

func main() {
	var metricsAddr string
	var enableLeaderElection bool
	flag.StringVar(&metricsAddr, "metrics-addr", ":8080", "The address the metric endpoint binds to.")
	flag.BoolVar(&enableLeaderElection, "enable-leader-election", false,
		"Enable leader election for controller manager. "+
			"Enabling this will ensure there is only one active controller manager.")
	flag.BoolVar(&enableValidatingWebhook, "enable-validating-webhook", false, "Enable validating webhook")
	flag.StringVar(&webhookName, "webhook-name", "webhook-service", "Webhook name")
	flag.StringVar(&webhookNamespace, "webhook-namespace", "kube-system", "Webhook namespace")
	flag.BoolVar(&enableAnalytics, "enable-analytics", false, "Send analytical events to Google Analytics")
	flag.Parse()

	ctrl.SetLogger(klogr.New())

	mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{
		Scheme:             scheme,
		MetricsBindAddress: metricsAddr,
		Port:               9443,
	})
	if err != nil {
		setupLog.Error(err, "unable to start manager")
		os.Exit(1)
	}

	cfg := mgr.GetConfig()
	stopCh := make(chan struct{})
	defer close(stopCh)

	crdClient := clientset.NewForConfigOrDie(cfg)
	vwcClient := admissionregistrationv1.NewForConfigOrDie(cfg)

	err = watchCRD(crdClient, vwcClient, stopCh, mgr)
	if err != nil {
		setupLog.Error(err, "unable to watch crds")
		os.Exit(1)
	}
	// +kubebuilder:scaffold:builder

	setupLog.Info("starting manager")
	if err := mgr.Start(ctrl.SetupSignalHandler()); err != nil {
		setupLog.Error(err, "problem running manager")
		os.Exit(1)
	}
}
